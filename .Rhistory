knn_tot <- sum(diag(knn_tab_norm))               # Total andel korrekt klassfisering
knn_tab_norm <- knn_tab %>%
prop.table %>%
round(3)
knn_tot <- sum(diag(knn_tab_norm))               # Total andel korrekt klassfisering
knn_tot
logreg_tot
knn_tot
logreg_tot
knn_tot
knn_tab_norm
logreg_tab_norm
library("Openmx")
library("openmx")
install.packages("openmz")
install.packages("openmx")
install.packages("Openmx")
install.packages("OpenMx")
data(twinData)
str(twinData)
plot(wt1 ~ wt2, data = twinData)
library(OpenMx)
data(twinData)
str(twinData)
plot(wt1 ~ wt2, data = twinData)
selVars = c("bmi1", "bmi2")
mzData <- subset(twinData, zyg == 1, selVars)
dzData <- subset(twinData, zyg == 3, selVars)
# equivalently
mzData <- subset(twinData, zygosity == "MZFF", selVars)
# Disregard sex, pick older cohort
mz <- subset(twinData, zygosity %in% c("MZFF","MZMM") & cohort == "older", selVars)
exp(0.024)
exp(0.024)^2014
exp(0.024)^14
?AIC
install.packages("caret")
install.packages("gridExtra")
install.packages("modelr")
install.packages("broom")
# Read the data as "tibble" (a type of data frame, but automatically recognize factors)
default <- as_tibble(Default)
library(ISLR)       # Contains the data we want to analyse
library(tidyverse)  # data manipulation and visualization
library(modelr)     # provides easy pipeline modeling functions
library(broom)      # helps to tidy up model outputs
# Read the data as "tibble" (a type of data frame, but automatically recognize factors)
default <- as_tibble(Default)
head(default) # sneak a peak at the data
# Some figures exploring the relation between default and balance (their debt)
ggplot(default, aes(x = balance, y = default)) +
geom_point()
ggplot(default, aes(x = default, y = balance)) +
geom_boxplot(aes(color = default))
# Some figures exploring the relation between default and balance (their debt)
plot(x,y)
# Some figures exploring the relation between default and balance (their debt)
plot(balance, default, data = default)
# Some figures exploring the relation between default and balance (their debt)
plot(default$balance, default$default)
boxplot(default ~ balance, data = default)
boxplot(default ~ balance, data = default)
boxplot(balance ~ default, data = default)
ggplot(default, aes(x = default, y = balance)) +
geom_boxplot(aes(color = default))
# Before estimation, split the data into a training and a test set
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(default), replace = T, prob = c(0.6,0.4))
train <- default[sample, ]
test <- default[!sample, ]
# Showcasing why ordinary linear regression does not work
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "lm") +
ggtitle("Linear regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
# model1: Logistic regression with balance as covariate (explanatory variable)
model1 <- glm(default ~ balance, data = train,
family = "binomial")
# model1: Logistic regression with balance as covariate (explanatory variable)
model1 <- glm(default ~ balance, data = train,
family = "binomial")
# Check the model
summary(model1)
tidy(model1)
exp(coef(model1))
# Predicting default probability of individuels with balance 1000 and 2000
predict(model1, data.frame(balance = c(1000, 2000)), type = "response")
# Plot of model
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob)) +
geom_point(alpha = .15) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
# Make a second model where "student" is used as covariate (explanatory variable)
model2 <- glm(default ~ student, family = "binomial", data = train)
tidy(model2)
# prediction with model2
predict(model2, data.frame(student = factor(c("Yes", "No"))), type = "response")
# Make a third model including all explanatory variable
model3 <- glm(default ~ balance + income + student, family = "binomial", data = train)
tidy(model3)
# Figure illustrating whats going on
ggplot(default, aes(x = student, y = balance)) +
geom_boxplot(aes(color = student))
# Comment: We see that students have greater debts (balance), so in model2 we are seeing the effect that a student is
# a "confounder" for having a lot of debt! After adjusting for the balance it turns out student are better at handeling their
# debt compared to non-students with equal amount of debt. We illustrate this by doing the following prediction
# of a non-student and a student with the same income and debt:
two_people <- tibble(balance = 1500, income = 40, student = c("Yes", "No"))
predict(model3, two_people, type = "response") # The non-student has twice the probability of defaulting!
# Regression curve adjusted for students and non-students:
default %>%
mutate(prob = ifelse(default == "Yes", 1, 0)) %>%
ggplot(aes(balance, prob, color = student)) +
geom_point(alpha = .15) +
geom_smooth(aes(color = student), method = "glm", method.args = list(family = "binomial")) +
ggtitle("Logistic regression model fit") +
xlab("Balance") +
ylab("Probability of Default")
# with AIC
AIC(model1, model2, model3)
count.mod1 <-  table(test$default, test.predicted.model1 > 0.5)
count.mod2 <-  table(test$default, test.predicted.model2 > 0.5)
#First we predict the (probability of defaulting) for each individual in the training set using each model
test.predicted.model1 <- predict(model1, newdata = test, type = "response")
test.predicted.model2 <- predict(model2, newdata = test, type = "response")
test.predicted.model3 <- predict(model3, newdata = test, type = "response")
count.mod1 <-  table(test$default, test.predicted.model1 > 0.5)
count.mod2 <-  table(test$default, test.predicted.model2 > 0.5)
count.mod3 <-  table(test$default, test.predicted.model3 > 0.5)
count.mod2
# Check e.g. precision
prec1 < count.mod1[2,2]/(count.mod1[2,1] + count.mod1[2,2])
# Check e.g. precision
prec1 <-  count.mod1[2,2]/(count.mod1[2,1] + count.mod1[2,2])
prec3 <- count.mod1[2,2]/(count.mod1[2,1] + count.mod1[2,2])
prec1
prec1
prec2
prec3
prec2 <- 0 # just look at count.mod2, it does not predict any defaults!
prec3 <- count.mod1[2,2]/(count.mod1[2,1] + count.mod1[2,2])
prec1
prec2
prec3
prec1
prec2
prec3
prec3 <- count.mod3[2,2]/(count.mod3[2,1] + count.mod3[2,2])
prec1
prec2
prec3
plot(x, alpha1 + beta*x)
x <- seq(10)
alpha1 <- 2
alpha2 <- 2.5
alpha3 <- 3
beta <- 1
plot(x, alpha1 + beta*x)
plot(x, alpha1 + beta*x, type = "l", col = "red")
lines(x, alpha2 + beta*x, type "l", col = "blue")
lines(x, alpha2 + beta*x, type = "l", col = "blue")
lines(x, alpha3 + beta*x, type = "l", col = "blue")
58 - 39
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect > 1
tf <- num_vect < 1
tf
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
summary(model1)
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
1.0055^50
1.0055^100
1.0055^1000
1.0055^500
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
library(ISLR)
head(Default)
boxplot(balance ~ default, data = Default)
is.factor(Default$default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
1.00557^500
to_personer <- data.frame(balance = c(1000, 2000))
to_personer
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(model1, to_personer, type = "response")
pred
summary(model1)
model1
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(model1, to_personer, type = "response")
pred
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
nrow(Default)
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(object = model1, newdata = to_personer, type = "response")
pred
klass <- ifelse(pred > 0.5, "Yes", "No")
klass
test
library(ISLR)
head(Default)
is.factor(Default$default)
boxplot(balance ~ default, data = Default)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(object = model1, newdata = to_personer, type = "response")
klass <- ifelse(pred > 0.5, "Yes", "No")
pred
test
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(object = model1, newdata = to_personer, type = "response")
pred
klass <- ifelse(pred > 0.5, "Yes", "No")
klass
AIC(model1)
nrow(Default)
train <- Default[1:7000, ]
test <- Default[7001:10000, ]
model1 <- glm(default ~ balance, data = train, family = "binomial")
summary(model1)
exp(coef(model1))
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(object = model1, newdata = to_personer, type = "response")
klass <- ifelse(pred > 0.5, "Yes", "No")
pred
klass
AIC(model1)
sann <- test$default
sann
pred_test <- predict(model1, newdata = test, type = "response")
klassifisering <- ifelse(pred_test > 0.5, "Yes", "No")
klassifisering
table(sann, klassifisering)
# Data
library(ISLR)
# Pakker vi trenger
library(caret)
# Data
library(ISLR)
head(ISLR)
# Data
library(ISLR)
head(Default)
# Pakke vi trenger for KNN
library(caret)
# Hvis vi vil sette k selv
model1 <- train(default ~ balance,
data = Default,
method = "knn",
tuneGrid = data.frame(k = 50))
# Hvis vi vil bruke kryssvalidering
trControl <- trainControl(method = "cv",
number = 5)
model2 <- train(default ~ balance,
data = Default,
method ="knn",
trControl = trControl,
metric = "Accuracy")
# Hvilken k verdi fikk vi?
k <- model2$finalModel$k
k
# Klassifisering
to_kunder <- data.frame(balance = c(1500, 500))
predict(model2, newdata = to_kunder)
str(Default$default)
# prediksjon
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(model1, newdata = to_personer, type = "response")
klass <- ifelse(pred > 0.5, "Yes", "No")
# Ingen omkoding trengs:
str(Default$default)
# trening og testsett
nrow(Default)
train <- Default[1:7000, ]
# modell
model1 <- glm(default ~ balance, data = train,
family = "binomial")
test <- Default[7001:1000, ]
summary(model1)
exp(coef(model1))
1.055^50
# prediksjon
to_personer <- data.frame(balance = c(1000, 2000))
pred <- predict(model1, newdata = to_personer, type = "response")
pred <- predict(model1, newdata = to_personer)
pred
sqrt(0.04)
sqrt(0.19)
750/30
15*50
sqrt(750)
x=1.193
6*x - 8*x + 1
6*x^2 - 8*x + 1
x <- seq(-2, 2.5, 0.01)
y <- 4*x^3/3 - 7*x^2 + 2*x + 4
plot(x,y, type = "l")
x <- seq(-10, 10, 0.01)
y <- 4*x^3/3 - 7*x^2 + 2*x + 4
plot(x,y, type = "l")
y <- 4*x^3/3 - 7*x^2 + 2*x + 4
x <- seq(-2, 2.5, 0.01)
plot(x,y, type = "l")
x <- seq(-2, 2.5, 0.01)
y <- 4*x^3/3 - 7*x^2 + 2*x + 4
plot(x,y, type = "l")
x <- -2
y <- 4*x^3/3 - 7*x^2 + 2*x + 4
y
x <- 2.5
y <- 4*x^3/3 - 7*x^2 + 2*x + 4
y
exp(-0.03)
11441*0.07
exp(-2.4)
4500*9
1700000*exp(-7.14 -0.463*5)
1700000*exp(-0.463*5)
1700000*exp(-7.14 -0.463*5)
1700000*exp(-7.14)*exp( -0.463*5)
13456.83*exp(-0.042*3.5)
13456.83*exp(-0.042*5)
11617-10907
log(3.5)
?mean
install.packages("ggplot2")
version
setwd("C:/Users/s14363/Dropbox/MSCOUNT/paper")
setwd("C:/Users/s14363/Dropbox/MSCOUNT/R")
# Dependencies
library(TMB)
source("utils.R")
dyn.load(dynlib("msingarch_log_linear"))
dyn.load(dynlib("msingarch_linear"))
modelb <- MSingarch(m = 2,
par = list(a = c(0.2, 0.4),
b = c(0.3, 0.4),
d = c(1, 0.5),
gamma = matrix(c(0.95, 0.05,0.05, 0.95),nrow = 2)),
mean_spec = "log-linear")
# Specify model
modela <- MSingarch(m = 2,
par = list(a = c(0.1, 0.4),
b = c(0.3, 0.4),
d = c(2, 3),
gamma = matrix(c(0.95, 0.05,0.05, 0.95),nrow = 2)),
mean_spec = "linear")
# Simulate a sample
set.seed(1)
sima <- rMSingarch(n = 500, model = modela)
simb <- rMSingarch(n = 500, model = modelb)
# Estimate data
fita <- fitMSingarch(data = sima$y,
model = modela,
init_par = modela$par,
init_mean = sima$init_mean)
fita
plot(fita)
fitb <- fitMSingarch(data = simb$y,
model = modelb,
init_par = modelb$par,
init_mean = simb$init_mean)
fitb
plot(fitb)
# Compare
library(ggmatrix)
install.packages("ggmatrix")
library(ggplot2)
nstall.packages("GGally")
install.packages("GGally")
# Compare
library(ggmatrix)
# Compare
library(GGally)
?ggmatrix
ggmatrix(plot(sima), plot(simb))
psima <- plot(sima)
psima <- plot(sima)
psimb <- plot(simb)
pfita <- plot(fita)
pfitb <- plot(fitb)
ggmatrix(psima, pfita, nrow = 2)
ggmatrix(psima, pfita, nrow = 2, ncol = 1)
?ggmatrix
ggmatrix(list(psima, pfita), nrow = 2, ncol = 1, )
ggmatrix(list(plot(sima), plot(simb)), nrow = 2, ncol = 1, )
ggmatrix(list(plot(sima), plot(fita)), nrow = 2, ncol = 1, )
ggmatrix(list(plot(sima), plot(fita)), nrow = 2)
ggmatrix(list(plot(simb), plot(fitb)), nrow = 2)
ggmatrix(list(plot(sima), plot(fita)), nrow = 2, ncol = 1)
ggmatrix(list(plot(simb), plot(fitb)), nrow = 2, ncol = 1)
ggmatrix(list(plot(sima), plot(fita)), nrow = 2, ncol = 1)
ggmatrix(list(plot(simb), plot(fitb)), nrow = 2, ncol = 1)
ggmatrix(list(plot(sima), plot(fita)), nrow = 2, ncol = 1)
plot(fitb$regimeprobs)
plot(fitb$regimeprobs[ ,1])
plot(fitb$regimeprobs[ ,1], type = "l")
ggmatrix(list(plot(sima), plot(fita)), nrow = 2, ncol = 1)
fita
plot(fita)
ggmatrix(list(plot(sima), plot(fita)), nrow = 2, ncol = 1)
ggmatrix(list(plot(simb), plot(fitb)), nrow = 2, ncol = 1)
